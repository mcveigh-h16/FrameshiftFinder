{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fnil\fcharset0 HelveticaNeue;\f2\fmodern\fcharset0 CourierNewPSMT;
\f3\fmodern\fcharset0 CourierNewPS-BoldMT;\f4\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red0\green0\blue0;
\red0\green0\blue117;\red83\green85\blue2;\red16\green121\blue2;\red11\green84\blue83;\red25\green25\blue25;
\red11\green76\blue180;}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0;
\cssrgb\c0\c0\c53333;\cssrgb\c40000\c40000\c0;\cssrgb\c0\c53333\c0;\cssrgb\c0\c40000\c40000;\cssrgb\c12941\c12941\c12941;
\cssrgb\c1961\c38824\c75686;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
Rune\
\pard\pardeftab720\partightenfactor0

\f1\fs28\fsmilli14222 \cf0 \cb1 To create an anaconda environment. \uc0\u8232 \u8232 conda create --name\
\
\uc0\u8232 Make sure you use the new version: \u8232 \u8232 pip install muscle3 \
\pard\pardeftab720\partightenfactor0

\f0\fs28 \cf2 \cb3 \
\
\
    \cf5 for\cf2  i\cf6 ,\cf2 seqRecord \cf5 in\cf2  enumerate\cf6 (\cf2 alignment\cf6 ):\cf2 \
        gapIndex \cf6 =\cf2  find\cf6 (\cf2 seqRecord\cf6 .\cf2 seq\cf6 ,\cf2  \cf7 '-'\cf6 )\cf2 \
        \cf5 for\cf2  snp \cf5 in\cf2  vcfDict\cf6 :\cf2 \
            \cf5 if\cf2  \cf5 int\cf6 (\cf2 snp\cf6 )\cf2  \cf6 -\cf2  \cf8 1\cf2  \cf5 in\cf2  gapIndex\cf6 :\cf2 \
                vcfDict\cf6 [\cf2 snp\cf6 ][\cf8 1\cf6 ][\cf2 i\cf6 -\cf8 1\cf6 ]\cf2  \cf6 =\cf2  \cf7 "-"\cf2 \
    \cf5 for\cf2  snp \cf5 in\cf2  vcfDict\cf6 :\cf2 \
        vcfDict\cf6 [\cf2 snp\cf6 ][\cf8 1\cf6 ]\cf2  \cf6 =\cf2  \cf6 [\cf2 s \cf5 for\cf2  s \cf5 in\cf2  vcfDict\cf6 [\cf2 snp\cf6 ][\cf8 1\cf6 ]\cf2  \cf5 if\cf2  s \cf6 !=\cf2  \cf7 "-"\cf6 ]\cf2 \
    \cf5 return\cf2  vcfDict \
\
\
\
\pard\pardeftab720\partightenfactor0

\f2\fs26\fsmilli13333 \cf9 \cb1 subprocess
\f3\b .
\f2\b0 run(['esl-reformat --informat afa stockholm protein_all_aln | esl-alimanip --seq-k "$1" - | esl-alistat - >
\f4\fs29\fsmilli14667 \cf0 \
\
\
\
\
\
\'a0\
\'a0with open(output_file, "w") as o:\
\'a0\'a0\'a0 for record in AlignIO.read(input_file, "fasta"):\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 record.seq = record.seq.ungap("-")\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0 SeqIO.write(record, o, "fasta")\
##removes all gaps in the sequence\
\'a0\
The Seq object has an .ungap() method, which should help do what you want, e.g.\
\'a0\
from Bio import SeqIO\
for record in SeqIO.parse("example.fasta", "fasta"):\
\'a0\'a0\'a0 print("%s without gaps is %s" % ({\field{\*\fldinst{HYPERLINK "http://record.id/"}}{\fldrslt \cf10 \ul \ulc10 record.id}}, record.seq.ungap("-")))\
\'a0\
\'a0\
\'a0\
\'a0\
from Bio.Seq import MutableSeq\
from Bio.Alphabet import generic_dna\
my_seq = MutableSeq("ACTCGTCGTCG", generic_dna)\
\'a0\
\'a0\
Return first occurrence position of a single entry (i.e. letter).\
\'a0\
my_seq = MutableSeq("ACTCGACGTCG")\
my_seq.index("A")\
0\
my_seq.index("T")\
2\
my_seq.index(Seq("T"))\
2\
\'a0\
\'a0\
\'a0\
mutable_seq = my_seq.tomutable()\
mutable_seq.remove("T")\
mutable_seq}